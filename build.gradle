plugins {
	id 'java'
	id 'jacoco'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

jacoco {
    toolVersion = "0.8.10"  // Specify the JaCoCo version
}

jacocoTestReport {
    reports {
        xml.required = true
		html.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
		xml.outputLocation = layout.buildDirectory.file('jacoco.xml')
    }
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'  // Apply the rule at the class level

            // Set a minimum percentage for line coverage
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80  // 80% line coverage required
            }

            // Set a minimum percentage for branch coverage
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.70  // 70% branch coverage required
            }
        }
    }
}


test {
    finalizedBy jacocoTestReport  // Generate the report after running tests
}

tasks.named('test') {
	useJUnitPlatform()
}
